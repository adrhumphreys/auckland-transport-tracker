{"id":"../node_modules/gl-quat/invert.js","dependencies":[{"name":"/Users/adrian/Code/react/follower/package.json","includedInParent":true,"mtime":1543051274389},{"name":"/Users/adrian/Code/react/follower/.browserslistrc","includedInParent":true,"mtime":1543035296869},{"name":"/Users/adrian/Code/react/follower/node_modules/gl-quat/package.json","includedInParent":true,"mtime":1431616869000}],"generated":{"js":"module.exports = invert\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nfunction invert (out, a) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n    dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,\n    invDot = dot ? 1.0 / dot : 0\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot\n  out[1] = -a1 * invDot\n  out[2] = -a2 * invDot\n  out[3] = a3 * invDot\n  return out\n}\n","map":{"mappings":[{"source":"../node_modules/gl-quat/invert.js","original":{"line":1,"column":0},"generated":{"line":1,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":2,"column":0},"generated":{"line":2,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":3,"column":0},"generated":{"line":3,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":4,"column":0},"generated":{"line":4,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":5,"column":0},"generated":{"line":5,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":6,"column":0},"generated":{"line":6,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":7,"column":0},"generated":{"line":7,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":8,"column":0},"generated":{"line":8,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":9,"column":0},"generated":{"line":9,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":10,"column":0},"generated":{"line":10,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":11,"column":0},"generated":{"line":11,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":12,"column":0},"generated":{"line":12,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":13,"column":0},"generated":{"line":13,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":14,"column":0},"generated":{"line":14,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":15,"column":0},"generated":{"line":15,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":16,"column":0},"generated":{"line":16,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":17,"column":0},"generated":{"line":17,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":18,"column":0},"generated":{"line":18,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":19,"column":0},"generated":{"line":19,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":20,"column":0},"generated":{"line":20,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":21,"column":0},"generated":{"line":21,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":22,"column":0},"generated":{"line":22,"column":0}},{"source":"../node_modules/gl-quat/invert.js","original":{"line":23,"column":0},"generated":{"line":23,"column":0}}],"sources":{"../node_modules/gl-quat/invert.js":"module.exports = invert\n\n/**\n * Calculates the inverse of a quat\n *\n * @param {quat} out the receiving quaternion\n * @param {quat} a quat to calculate inverse of\n * @returns {quat} out\n */\nfunction invert (out, a) {\n  var a0 = a[0], a1 = a[1], a2 = a[2], a3 = a[3],\n    dot = a0 * a0 + a1 * a1 + a2 * a2 + a3 * a3,\n    invDot = dot ? 1.0 / dot : 0\n\n  // TODO: Would be faster to return [0,0,0,0] immediately if dot == 0\n\n  out[0] = -a0 * invDot\n  out[1] = -a1 * invDot\n  out[2] = -a2 * invDot\n  out[3] = a3 * invDot\n  return out\n}\n"},"lineCount":23}},"hash":"5a89f7b8fa7304191ec9c9856d1e0b98","cacheData":{"env":{}}}